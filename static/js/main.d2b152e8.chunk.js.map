{"version":3,"sources":["model/sir.js","SIRForm.js","SIRView.js","ChartView.js","App.js","serviceWorker.js","index.js"],"names":["dummyModel","makeStyles","theme","createStyles","root","flexGrow","grid","actions","float","margin","spacing","textField","color","palette","text","secondary","saints","infectes","retires","time","Chart","initialState","lineData","labels","Array","length","datasets","label","data","React","useState","state","className","width","height","options","title","display","fontSize","App","Box","m","Typography","variant","component","h","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAOaA,G,0CCDKC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,KAAM,GAINC,QAAS,CACLC,MAAO,OACPC,OAAQP,EAAMQ,QAAQ,IAE1BC,UAAW,CAGPC,MAAOV,EAAMW,QAAQC,KAAKC,gBDfZ,WACtB,IAOIC,EAAS,GACTC,EAAW,GACXC,EAAU,GAEdF,EAAO,GARI,GASXC,EAAS,GARE,GASXC,EAAQ,GARG,EAUX,IAAK,IAAIC,EAAO,EAAGA,EAfH,GAemBA,IAC/BH,EAAOG,GAAQ,GAAAH,EAAOG,EAAO,GAC7BF,EAASE,GAAQF,EAASE,EAAO,IAAM,EAAI,EAfhC,IADF,GAgBgDH,EAAOG,EAAO,GACvED,EAAQC,GAAQF,EAASE,EAAO,IAAM,EAhB3B,IAgByCD,EAAQC,EAAO,GAGvE,MAAO,CAAEH,SAAQC,WAAUC,a,GEvBbjB,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,Q,cCmCPe,EAxCD,WACV,IAAMC,EAAe,CACjBC,SAAU,CACNC,OAAQ,IAAIC,MAAMxB,IAAagB,OAAOS,QACtCC,SAAU,CACN,CACIC,MAAO,CAAC,oBACRC,KAAM5B,IAAagB,QAEvB,CACIW,MAAO,CAAC,0BACRC,KAAM5B,IAAaiB,UAEvB,CACIU,MAAO,CAAC,0BACRC,KAAM5B,IAAakB,YAfnB,EAoBUW,IAAMC,SAAST,GApBzB,mBAoBTU,EApBS,UAsBhB,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIJ,KAAMG,EAAMT,SACZW,MAAM,KACNC,OAAO,KACPC,QAAS,CACLC,MAAO,CACHC,SAAS,EACTvB,KAAM,8BACNwB,SAAU,SCVnBC,EAlBH,WACR,OACI,yBAAKP,UAAU,OACX,kBAACQ,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,gCAIJ,kBAACF,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,MAAtC,gBACkB5C,IAAagB,QAE/B,kBAACwB,EAAA,EAAD,CAAKC,EAAG,EAAGI,EAAG,IACV,kBAAC,EAAD,SCRIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2b152e8.chunk.js","sourcesContent":["export const simpleSir = (params) => {\r\n    const { s, i, r } = params;\r\n\r\n    const result = s * i * r;\r\n    return result;\r\n};\r\n\r\nexport const dummyModel = () => {\r\n    const maxTime = 30;\r\n    const beta = 0.5;\r\n    const lambda = 12;\r\n    const s0 = 0.7;\r\n    const i0 = 0.3;\r\n    const r0 = 0;\r\n\r\n    var saints = [];\r\n    var infectes = [];\r\n    var retires = [];\r\n\r\n    saints[0] = s0;\r\n    infectes[0] = i0;\r\n    retires[0] = r0;\r\n\r\n    for (let time = 1; time < maxTime; time++) {\r\n        saints[time] = saints[time - 1] * (1 - beta);\r\n        infectes[time] = infectes[time - 1] * (1 - 1 / lambda) + saints[time - 1] * beta;\r\n        retires[time] = infectes[time - 1] * (1 / lambda) + retires[time - 1];\r\n    }\r\n\r\n    return { saints, infectes, retires };\r\n};\r\n","import React from 'react';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, TextField, FormControl, Button } from '@material-ui/core';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        grid: {\r\n            // paddingLeft: '2em',\r\n            // paddingRight: '2em',\r\n        },\r\n        actions: {\r\n            float: 'left',\r\n            margin: theme.spacing(1),\r\n        },\r\n        textField: {\r\n            // padding: theme.spacing(2),\r\n            // textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n);\r\n\r\nconst validationSchema = (t) =>\r\n    Yup.object().shape({\r\n        S: Yup.number()\r\n            .typeError('error.shouldBeNumber')\r\n            .positive('error.positiveNumber')\r\n            .min(10, 'error.tooSmall')\r\n            .max(20, 'error.tooLarge')\r\n            .required('error.required'),\r\n    });\r\n\r\nexport const SIRForm = ({ onChange }) => {\r\n    const classes = useStyles();\r\n\r\n    const initialValues = {\r\n        S: '',\r\n    };\r\n\r\n    const name = 'S';\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={initialValues}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                onChange({ s: values['S'], i: 2, r: 1 });\r\n            }}\r\n            validationSchema={validationSchema()}\r\n        >\r\n            {({ values, touched, errors, handleChange, handleBlur }) => (\r\n                <Form>\r\n                    <Grid\r\n                        className={classes.grid}\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <FormControl className={classes.formControl}>\r\n                            <TextField\r\n                                className={classes.textField}\r\n                                name={name}\r\n                                label={'Parametre S'}\r\n                                value={values[name]}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                helperText={errors[name] && touched[name] && errors[name]}\r\n                                error={Boolean(errors[name] && touched[name])}\r\n                            ></TextField>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Button\r\n                        className={classes.actions}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Calculer\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { SIRForm } from './SIRForm';\r\nimport { Grid } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { simpleSir, dummyModel } from './model/sir';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\nexport const SIRView = () => {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState();\r\n    // eslint-disable-next-line no-console\r\n    console.log({ values });\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\" spacing={3}>\r\n                <Grid item>\r\n                    <SIRForm onChange={(values) => setValues(values)} />\r\n                </Grid>\r\n                {values && <Grid item>Result = {simpleSir(values)}</Grid>}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { dummyModel } from './model/sir';\r\n\r\nconst Chart = () => {\r\n    const initialState = {\r\n        lineData: {\r\n            labels: new Array(dummyModel().saints.length),\r\n            datasets: [\r\n                {\r\n                    label: ['Population saine'],\r\n                    data: dummyModel().saints,\r\n                },\r\n                {\r\n                    label: ['Population infectée'],\r\n                    data: dummyModel().infectes,\r\n                },\r\n                {\r\n                    label: ['Population rétablie'],\r\n                    data: dummyModel().retires,\r\n                },\r\n            ],\r\n        },\r\n    };\r\n    const [state, setState] = React.useState(initialState);\r\n\r\n    return (\r\n        <div className=\"Chart\">\r\n            <Line\r\n                data={state.lineData}\r\n                width=\"10\"\r\n                height=\"10\"\r\n                options={{\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Le graphique de Paul Festor',\r\n                        fontSize: 25,\r\n                    },\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Typography, Box } from '@material-ui/core';\r\nimport { SIRView } from './SIRView';\r\nimport { dummyModel } from './model/sir';\r\nimport { Chart } from 'chart.js';\r\nimport ChartPage from './ChartView';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Box m={8}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    Projet MODCOV19 - prototype\r\n                </Typography>\r\n            </Box>\r\n            <Typography variant=\"body1\" component=\"h2\">\r\n                Dummy result {dummyModel().saints}\r\n            </Typography>\r\n            <Box m={8} h={30}>\r\n                <ChartPage />\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MyApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MyApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}